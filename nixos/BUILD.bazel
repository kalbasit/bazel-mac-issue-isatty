# gazelle:exclude vendor
# gazelle:exclude node_modules

load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

#
# Golang
#

load("@bazel_gazelle//:def.bzl", "gazelle")

gazelle(
    name = "gazelle",
    command = "fix",
    external = "external",
    extra_args = [
        "-build_file_name",
        "BUILD.bazel",
    ],
    prefix = "github.com/kalbasit/bazel-reproducible/nixos",
)

#
# Typescript
#

exports_files([
    "tsconfig.json",
    "package.json",
])

#
# Tools
#

load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier")

buildifier(
    name = "buildifier",
)

# packages

go_library(
    name = "go_default_library",
    srcs = ["nixos.go"],
    importpath = "github.com/kalbasit/bazel-reproducible/nixos",
    visibility = ["//visibility:public"],
)

go_test(
    name = "go_default_test",
    srcs = ["nixos_test.go"],
    embed = [":go_default_library"],
)

# This is like a "js_library", but there are no actions to run on JS files so a
# filegroup is semantically equivalent.
filegroup(
    name = "program",
    srcs = ["index.js"],
)

load("@build_bazel_rules_nodejs//:defs.bzl", "jasmine_node_test")

jasmine_node_test(
    name = "test",
    srcs = glob(["*.spec.js"]),
    node_modules = "@root_node_modules//:node_modules",
    deps = [
        ":program",
    ],
)
